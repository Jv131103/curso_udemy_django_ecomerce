                Projeto e-commerce - Cadastro de usuários
                        E login/logout na página


Em forms.py de perfil, vamos fazer as seguintes adições:

    from django import forms
    from django.contrib.auth.models import User

    from . import models


    class PerfilForm(forms.ModelForm):
        class Meta:
            model = models.Perfil
            fields = '__all__'
            exclude = ('usuario',)


    class UserForm(forms.ModelForm):
        password = forms.CharField(
            required=False,
            widget=forms.PasswordInput(),
            label='Senha',
        )

        password2 = forms.CharField(
            required=False,
            widget=forms.PasswordInput(),
            label='Confirmação senha'
        )

        def __init__(self, usuario=None, *args, **kwargs):
            super().__init__(*args, **kwargs)

            self.usuario = usuario

        class Meta:
            model = User
            fields = ('first_name', 'last_name', 'username', 'password',
                    'password2', 'email')

        def clean(self, *args, **kwargs):
            data = self.data
            cleaned = self.cleaned_data
            validation_error_msgs = {}

            usuario_data = cleaned.get('username')
            email_data = cleaned.get('email')
            password_data = cleaned.get('password')
            password2_data = cleaned.get('password2')

            usuario_db = User.objects.filter(username=usuario_data).first()
            email_db = User.objects.filter(email=email_data).first()

            error_msg_user_exists = 'Usuário já existe'
            error_msg_email_exists = 'E-mail já existe'
            error_msg_password_match = 'As duas senhas não conferem'
            error_msg_password_short = 'Sua senha precisa de pelo menos 6 caracteres'
            error_msg_required_field = 'Este campo é obrigatório.'

            # Usuários logados: atualização
            if self.usuario:
                if usuario_db:
                    if usuario_data != usuario_db.username:
                        validation_error_msgs['username'] = error_msg_user_exists

                if email_db:
                    if email_data != email_db.email:
                        validation_error_msgs['email'] = error_msg_email_exists

                if password_data:
                    if password_data != password2_data:
                        validation_error_msgs['password'] = error_msg_password_match
                        validation_error_msgs['password2'] = error_msg_password_match

                    if len(password_data) < 6:
                        validation_error_msgs['password'] = error_msg_password_short

            # Usuários não logados: cadastro
            else:
                if usuario_db:
                    validation_error_msgs['username'] = error_msg_user_exists

                if email_db:
                    validation_error_msgs['email'] = error_msg_email_exists

                if not password_data:
                    validation_error_msgs['password'] = error_msg_required_field

                if not password2_data:
                    validation_error_msgs['password2'] = error_msg_required_field

                if password_data != password2_data:
                    validation_error_msgs['password'] = error_msg_password_match
                    validation_error_msgs['password2'] = error_msg_password_match

                if len(password_data) < 6:
                    validation_error_msgs['password'] = error_msg_password_short

            if validation_error_msgs:
                raise(forms.ValidationError(validation_error_msgs))

Agora em views.py de perfil, vamos alterar os seguintes itens:

    import copy

    from django.contrib import messages
    from django.contrib.auth import authenticate, login, logout
    from django.contrib.auth.models import User
    from django.http import HttpResponse
    from django.shortcuts import get_object_or_404, redirect, render
    from django.views import View

    from . import forms, models


    class BasePerfil(View):
        template_name = 'perfil/criar.html'

        def setup(self, *args, **kwargs):
            super().setup(*args, **kwargs)

            self.carrinho = copy.deepcopy(self.request.session.get('carrinho', {}))

            self.perfil = None

            if self.request.user.is_authenticated:
                self.perfil = models.Perfil.objects.filter(
                    usuario=self.request.user
                ).first()

                self.contexto = {
                    'userform': forms.UserForm(
                        data=self.request.POST or None,
                        usuario=self.request.user,
                        instance=self.request.user,
                    ),
                    'perfilform': forms.PerfilForm(
                        data=self.request.POST or None,
                        instance=self.perfil
                    )
                }
            else:
                self.contexto = {
                    'userform': forms.UserForm(
                        data=self.request.POST or None
                    ),
                    'perfilform': forms.PerfilForm(
                        data=self.request.POST or None
                    )
                }

            self.userform = self.contexto['userform']
            self.perfilform = self.contexto['perfilform']

            if self.request.user.is_authenticated:
                self.template_name = 'perfil/atualizar.html'

            self.renderizar = render(
                self.request, self.template_name, self.contexto)

        def get(self, *args, **kwargs):
            return self.renderizar


    class Criar(BasePerfil):
        def post(self, *args, **kwargs):
            if not self.userform.is_valid() or not self.perfilform.is_valid():
                messages.error(
                    self.request,
                    'Existem erros no formulário de cadastro. Verifique se todos '
                    'os campos foram preenchidos corretamente.'
                )

                return self.renderizar

            username = self.userform.cleaned_data.get('username')
            password = self.userform.cleaned_data.get('password')
            email = self.userform.cleaned_data.get('email')
            first_name = self.userform.cleaned_data.get('first_name')
            last_name = self.userform.cleaned_data.get('last_name')

            # Usuário logado
            if self.request.user.is_authenticated:
                usuario = get_object_or_404(
                    User, username=self.request.user.username)

                usuario.username = username

                if password:
                    usuario.set_password(password)

                usuario.email = email
                usuario.first_name = first_name
                usuario.last_name = last_name
                usuario.save()

                if not self.perfil:
                    self.perfilform.cleaned_data['usuario'] = usuario
                    print(self.perfilform.cleaned_data)
                    perfil = models.Perfil(**self.perfilform.cleaned_data)
                    perfil.save()
                else:
                    perfil = self.perfilform.save(commit=False)
                    perfil.usuario = usuario
                    perfil.save()

            # Usário não logado (novo)
            else:
                usuario = self.userform.save(commit=False)
                usuario.set_password(password)
                usuario.save()

                perfil = self.perfilform.save(commit=False)
                perfil.usuario = usuario
                perfil.save()

            if password:
                autentica = authenticate(
                    self.request,
                    username=usuario,
                    password=password
                )

                if autentica:
                    login(self.request, user=usuario)

            self.request.session['carrinho'] = self.carrinho
            self.request.session.save()

            messages.success(
                self.request,
                'Seu cadastro foi criado ou atualizado com sucesso.'
            )

            messages.success(
                self.request,
                'Você fez login e pode concluir sua compra.'
            )

            return redirect('produto:carrinho')


    class Atualizar(View):
        def get(self, *args, **kwargs):
            return HttpResponse('Atualizar')


    class Login(View):
        def post(self, *args, **kwargs):
            username = self.request.POST.get('username')
            password = self.request.POST.get('password')

            if not username or not password:
                messages.error(
                    self.request,
                    'Usuário ou senha inválidos.'
                )
                return redirect('perfil:criar')

            usuario = authenticate(
                self.request, username=username, password=password)

            if not usuario:
                messages.error(
                    self.request,
                    'Usuário ou senha inválidos.'
                )
                return redirect('perfil:criar')

            login(self.request, user=usuario)

            messages.success(
                self.request,
                'Você fez login no sistema e pode concluir sua compra.'
            )
            return redirect('produto:carrinho')


    class Logout(View):
        def get(self, *args, **kwargs):
            carrinho = copy.deepcopy(self.request.session.get('carrinho'))

            logout(self.request)

            self.request.session['carrinho'] = carrinho
            self.request.session.save()

            return redirect('produto:lista')

Em settings.py, vamos ajustar:

    """
    Django settings for loja project.

    Generated by 'django-admin startproject' using Django 5.2.4.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.2/ref/settings/
    """

    from pathlib import Path

    from django.contrib.messages import constants

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-^@hg!m+#6aza^fp7^lx8*fwjfg=f)h4dp__8f_3kh62vmkb8xg'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'produto',
        'pedido',
        'perfil',
        'crispy_forms',
        "crispy_bootstrap4",
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar'
    ]

    CRISPY_TEMPLATE_PACK = 'bootstrap4'

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar.middleware.DebugToolbarMiddleware'
    ]

    ROOT_URLCONF = 'loja.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                BASE_DIR / "templates"
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'loja.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/5.2/topics/i18n/

    LANGUAGE_CODE = 'pt-BR'

    TIME_ZONE = 'America/Sao_Paulo'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.2/howto/static-files/

    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR / "static"
    STATICFILES_DIRS = [
        BASE_DIR / "templates" / "static",  # Para uso no desenvolvimento
    ]

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Definindo a Media
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    # Definindo mensagens do Django
    MESSAGE_TAGS = {
        constants.DEBUG: 'alert-info',
        constants.ERROR: 'alert-danger',
        constants.INFO: 'alert-info',
        constants.SUCCESS: 'alert-success',
        constants.WARNING: 'alert-warning',
    }

    # Configurando Sessão
    # Sessão em dias: 60s * 60m * 24h * 1d
    SESSION_COOKIE_AGE = 60 * 60 * 24 * 7
    # Salvar cada sessão
    SESSION_SAVE_EVERY_REQUEST = False
    # Serializer - Padrão Json
    # SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickeSerializer'

    # Configurando IPS para debug
    # TODO: Remover debug toolbar
    INTERNAL_IPS = [
        '127.0.0.1',
    ]


Agora em templates/perfil de perfil, vamos criar um novo html e vamos chamá-lo de atualizar.html
e nele vamos fazer:

    {% extends 'perfil/criar.html' %}

    {% block titulo %}Atualizar perfil de {{ user }} | {% endblock %}

    {% block titulocadastro %}
        <h4>Atualizar cadastro</h4>
        <p>
            Utilize o formulário a seguir para atualizar seus dados.
        </p>
    {% endblock %}

E ainda em templates/perfil de perfil, vamos realizar os seguintes ajustes em criar.html:

    {% extends 'base.html' %}
    {% load crispy_forms_tags %}

    {% block titulo %}Criar perfil | {% endblock %}

    {% block conteudo %}

    <div class="row">

        {% if not request.user.is_authenticated %}
        <div class="col-lg mt-3">
            <h4>Login</h4>
            <p>Se você já fez cadastro, basta entrar com seu usuário e senha abaixo:</p>

            <form method="POST" action="{% url 'perfil:login' %}">
                {% csrf_token %}
                <div class="form-group">
                    <label for="InputUsuario1">Usuário</label>
                    <input type="text" name='username' class="form-control" id="InputUsuario1"
                        aria-describedby="usuarioHelp" placeholder="Digite seu usuário">
                </div>
                <div class="form-group">
                    <label for="exampleInputPassword1">Senha:</label>
                    <input name='password' type="password" class="form-control" id="exampleInputPassword1"
                        placeholder="Digite sua senha">
                </div>
                <button type="submit" class="btn btn-primary btn-block btn-lg">Entrar</button>
            </form>


        </div>
        {% endif %}

        <div class="col-lg mt-3">

            {% block titulocadastro %}
            <h4>Cadastro</h4>
            <p>
                Caso ainda não tenha cadastro, utilize o formulário a seguir para se
                cadastrar
            </p>
            {% endblock %}

            <form method="POST" action="">
                {% csrf_token %}
                {{ userform|crispy }}
                {{ perfilform|crispy }}

                <div class="row">
                    <div class="col">
                        <button type="submit" class='btn btn-primary btn-block btn-lg'>
                            Enviar
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    {% endblock %}

Em em templates, em _nav.html vamos alterar:

    {% load omfilters %}
    <nav class="navbar navbar-dark bg-primary navbar-expand-lg">
        <a class="navbar-brand" href="{% url "produto:lista" %}">E-commerce</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Link</a>
                </li>
                {% if request.user.is_authenticated %}
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Conta
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" href="{% url "perfil:criar" %}">Atualizar</a>
                            <a class="dropdown-item" href="{% url "perfil:logout" %}">Sair</a>
                        </div>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url "perfil:criar" %}">Entrar / Criar</a>
                    </li>
                {% endif %}

                {% if request.session.carrinho %}
                    <li class="nav-item">
                        <a class="nav-link nav-cart-link active" href="{% url "produto:carrinho" %}">
                            <span class="nav-cart-text mr-1">
                                Carrinho
                            </span>
                            <span class="nav-cart-count mr-1">
                                <strong>{{ request.session.carrinho|cart_total_qtd }}x</strong>
                            </span>
                            <span class="nav-cart-icon mr-2">
                                <i class="fas fa-shopping-cart"></i>
                            </span>
                        </a>
                    </li>
                {% endif %}
            </ul>
            <form class="form-inline my-2 my-lg-0">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
            </form>
        </div>
    </nav>
