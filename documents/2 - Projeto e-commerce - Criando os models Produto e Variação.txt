            Projeto e-commerce - Criando os models Produto e Variação

Em settings.py de loja, vamos adicionar:

    """
    Django settings for loja project.

    Generated by 'django-admin startproject' using Django 5.2.4.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.2/ref/settings/
    """

    from pathlib import Path

    from django.contrib.messages import constants

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-^@hg!m+#6aza^fp7^lx8*fwjfg=f)h4dp__8f_3kh62vmkb8xg'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'produto',
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar.middleware.DebugToolbarMiddleware'
    ]

    ROOT_URLCONF = 'loja.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                BASE_DIR / "templates"
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'loja.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/5.2/topics/i18n/

    LANGUAGE_CODE = 'pt-BR'

    TIME_ZONE = 'America/Sao_Paulo'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.2/howto/static-files/

    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR / "static"
    STATICFILES_DIRS = [
        BASE_DIR / "templates" / "static",  # Para uso no desenvolvimento
    ]

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Definindo a Media
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    # Definindo mensagens do Django
    MESSAGE_TAGS = {
        constants.DEBUG: 'alert-info',
        constants.ERROR: 'alert-danger',
        constants.INFO: 'alert-info',
        constants.SUCCESS: 'alert-succes',
        constants.WARNING: 'alert-warning',
    }

    # Configurando Sessão
    # Sessão em dias: 60s * 60m * 24h * 1d
    SESSION_COOKIE_AGE = 60 * 60 * 24 * 7
    # Salvar cada sessão
    SESSION_SAVE_EVERY_REQUEST = False
    # Serializer - Padrão Json
    # SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickeSerializer'

    # Configurando IPS para debug
    # TODO: Remover debug toolbar
    INTERNAL_IPS = [
        '127.0.0.1',
    ]

Após isso, em models.py de produto, vamos criar nosso produto:

    import os

    from django.conf import settings
    from django.db import models
    from PIL import Image

    # Create your models here.

    class Produto(models.Model):
        nome = models.CharField(max_length=255)
        descricao_curta = models.TextField(max_length=255)
        descricao_longa = models.TextField()
        imagem = models.ImageField(
            upload_to="produto_imagens/%Y/%m/", blank=True, null=True
        )
        slug = models.SlugField(unique=True)
        preco_marketing = models.FloatField(default=0)
        preco_marketing_promocional = models.FloatField(default=0)
        tipo = models.CharField(
            default="V",
            max_length=1,
            choices=(
                ("V", "Variável"),
                ("S", "Simples"),
            )
        )

        def __str__(self) -> str:
            return self.nome

        @staticmethod
        def resize_image(original_img, new_width=800):
            img_full_path = os.path.join(settings.MEDIA_ROOT, original_img.name)
            img_pil = Image.open(img_full_path)

            original_width, original_height = img_pil.size
            new_height = round((new_width * original_height) / original_width)

            if new_width >= original_width:
                img_pil.close()
                return

            nova_imagem = img_pil.resize(
                (new_width, new_height), Image.Resampling.LANCZOS
            )
            nova_imagem.save(img_full_path, optimize=True, quality=60)
            img_pil.close()

        def save(self, *args, **kwargs):
            super().save(*args, **kwargs)

            img_max_width = 800

            if self.imagem:
                self.resize_image(self.imagem, img_max_width)


    class Variacao(models.Model):
        produto = models.ForeignKey(Produto, on_delete=models.CASCADE)
        name = models.CharField(max_length=50, blank=True, null=True)
        preco = models.FloatField(default=0)
        preco_promocional = models.FloatField(default=0)
        estoque = models.PositiveIntegerField(default=1)

        def __str__(self) -> str:
            return self.name or self.produto.nome

        class Meta:
            verbose_name = "Variação"
            verbose_name_plural = "Variações"

Por fim em admin.py de produto, vamos criar:

    from django.contrib import admin

    from .models import Produto, Variacao


    class VariacaoInline(admin.TabularInline):
        model = Variacao
        extra = 1


    class ProdutoAdmin(admin.ModelAdmin):
        inlines = [
            VariacaoInline
        ]


    # Register your models here.
    admin.site.register(Produto, ProdutoAdmin)
    admin.site.register(Variacao)
