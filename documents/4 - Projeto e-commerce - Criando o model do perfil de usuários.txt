            Projeto e-commerce - Criando o model do perfil de usuário

Em settings.py de loja vamos fazer:

    """
    Django settings for loja project.

    Generated by 'django-admin startproject' using Django 5.2.4.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.2/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.2/ref/settings/
    """

    from pathlib import Path

    from django.contrib.messages import constants

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-^@hg!m+#6aza^fp7^lx8*fwjfg=f)h4dp__8f_3kh62vmkb8xg'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'produto',
        'pedido',
        'perfil',
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # TODO: Remover debug toolbar - Ele só serve para debugs
        'debug_toolbar.middleware.DebugToolbarMiddleware'
    ]

    ROOT_URLCONF = 'loja.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [
                BASE_DIR / "templates"
            ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'loja.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/5.2/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/5.2/topics/i18n/

    LANGUAGE_CODE = 'pt-BR'

    TIME_ZONE = 'America/Sao_Paulo'

    USE_I18N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.2/howto/static-files/

    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR / "static"
    STATICFILES_DIRS = [
        BASE_DIR / "templates" / "static",  # Para uso no desenvolvimento
    ]

    # Default primary key field type
    # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # Definindo a Media
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    # Definindo mensagens do Django
    MESSAGE_TAGS = {
        constants.DEBUG: 'alert-info',
        constants.ERROR: 'alert-danger',
        constants.INFO: 'alert-info',
        constants.SUCCESS: 'alert-succes',
        constants.WARNING: 'alert-warning',
    }

    # Configurando Sessão
    # Sessão em dias: 60s * 60m * 24h * 1d
    SESSION_COOKIE_AGE = 60 * 60 * 24 * 7
    # Salvar cada sessão
    SESSION_SAVE_EVERY_REQUEST = False
    # Serializer - Padrão Json
    # SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickeSerializer'

    # Configurando IPS para debug
    # TODO: Remover debug toolbar
    INTERNAL_IPS = [
        '127.0.0.1',
    ]

Agra em models.py de perfi:

    import re

    from django.contrib.auth.models import User
    from django.db import models
    from django.forms import ValidationError

    from utils.validacpf import valida_cpf


    class Perfil(models.Model):
        usuario = models.OneToOneField(User, on_delete=models.CASCADE,
                                    verbose_name='Usuário')
        idade = models.PositiveIntegerField()
        data_nascimento = models.DateField()
        cpf = models.CharField(max_length=11)
        endereco = models.CharField(max_length=50)
        numero = models.CharField(max_length=5)
        complemento = models.CharField(max_length=30)
        bairro = models.CharField(max_length=30)
        cep = models.CharField(max_length=8)
        cidade = models.CharField(max_length=30)
        estado = models.CharField(
            max_length=2,
            default='SP',
            choices=(
                ('AC', 'Acre'),
                ('AL', 'Alagoas'),
                ('AP', 'Amapá'),
                ('AM', 'Amazonas'),
                ('BA', 'Bahia'),
                ('CE', 'Ceará'),
                ('DF', 'Distrito Federal'),
                ('ES', 'Espírito Santo'),
                ('GO', 'Goiás'),
                ('MA', 'Maranhão'),
                ('MT', 'Mato Grosso'),
                ('MS', 'Mato Grosso do Sul'),
                ('MG', 'Minas Gerais'),
                ('PA', 'Pará'),
                ('PB', 'Paraíba'),
                ('PR', 'Paraná'),
                ('PE', 'Pernambuco'),
                ('PI', 'Piauí'),
                ('RJ', 'Rio de Janeiro'),
                ('RN', 'Rio Grande do Norte'),
                ('RS', 'Rio Grande do Sul'),
                ('RO', 'Rondônia'),
                ('RR', 'Roraima'),
                ('SC', 'Santa Catarina'),
                ('SP', 'São Paulo'),
                ('SE', 'Sergipe'),
                ('TO', 'Tocantins'),
            )
        )

        def __str__(self):
            return f'{self.usuario}'

        def clean(self):
            error_messages = {}

            cpf_enviado = self.cpf or None
            cpf_salvo = None
            perfil = Perfil.objects.filter(cpf=cpf_enviado).first()

            if perfil:
                cpf_salvo = perfil.cpf

                if cpf_salvo is not None and self.pk != perfil.pk:
                    error_messages['cpf'] = 'CPF já existe.'

            if not valida_cpf(self.cpf):
                error_messages['cpf'] = 'Digite um CPF válido'

            if re.search(r'[^0-9]', self.cep) or len(self.cep) < 8:
                error_messages['cep'] = 'CEP inválido, digite os 8 digitos do CEP.'

            if error_messages:
                raise ValidationError(error_messages)

        class Meta:
            verbose_name = 'Perfil'
            verbose_name_plural = 'Perfis'

Agra em admin.py de models, vamos realizar:

    from django.contrib import admin

    from . import models

    admin.site.register(models.Perfil)

Agora, na raiz do projeto, crie uma pasta chamada utils.

Após isso crie três arquivos:

    - __init__.py

    - validacpf.py

        import re

        def valida_cpf(cpf):
            cpf = str(cpf)
            cpf = re.sub(r'[^0-9]', '', cpf)

            if not cpf or len(cpf) != 11:
                return False

            novo_cpf = cpf[:-2]                # Elimina os dois últimos digitos do CPF
            reverso = 10                       # Contador reverso
            total = 0

            # Loop do CPF
            for index in range(19):
                if index > 8:                   # Primeiro índice vai de 0 a 9,
                    index -= 9                  # São os 9 primeiros digitos do CPF

                total += int(novo_cpf[index]) * reverso  # Valor total da multiplicação

                reverso -= 1                    # Decrementa o contador reverso
                if reverso < 2:
                    reverso = 11
                    d = 11 - (total % 11)

                    if d > 9:                   # Se o digito for > que 9 o valor é 0
                        d = 0
                    total = 0                   # Zera o total
                    novo_cpf += str(d)          # Concatena o digito gerado no novo cpf

            # Evita sequencias. Ex.: 11111111111, 00000000000...
            sequencia = novo_cpf == str(novo_cpf[0]) * len(cpf)

            # Descobri que sequências avaliavam como verdadeiro, então também
            # adicionei essa checagem aqui
            if cpf == novo_cpf and not sequencia:
                return True
            else:
                return False

    - utils.py:

        def formata_preco(val):
            return f'R$ {val:.2f}'.replace('.', ',')


        def cart_total_qtd(carrinho):
            return sum([item['quantidade'] for item in carrinho.values()])


        def cart_totals(carrinho):
            return sum(
                [
                    item.get('preco_quantitativo_promocional')
                    if item.get('preco_quantitativo_promocional')
                    else item.get('preco_quantitativo')
                    for item
                    in carrinho.values()
                ]
            )

Após isso realize as migrações
